name: HelloWorld.CI 

# on:
#   push:
#     branches: [master]
#   # pull_request:
#   #   branches: [master]

on:
 workflow_dispatch: 

env:
 AWS_CLUSTER: devOps-cluster
 AWS_REGION: eu-central-1
 NAMESPACE: devops-challenge
 APP_NAME: devopsapp

jobs:
  build:
    name: ‚öíÔ∏è Build Container
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout Master Repo
      uses: actions/checkout@v2
      with:
        ref: feature/kubedeployment
        path: app

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
           ${{ runner.os }}-node-
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Change directory to deployment
      run: |
            cd app/helloworld
            ls -ltr
    
    - name: Install Dependenicies
      run: |
        cd app/helloworld
        npm ci
    
    - name: npm Build
      run: |
        cd app/helloworld
        npm run build --if-present
    
    # - name: npm Test
    #   run: npm run test
    #   working-directory: test
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEYID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.AWS_REPO }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app/helloworld/deployments
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      

  deploy:
    name: üì¶ Deploy to EKS
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Master Repo
        uses: actions/checkout@v2
        with:
          ref: feature/kubedeployment
          path: deployment
      
      - name: Change directory to deployment
        run: |
              cd deployment/helloworld/deployments
              ls -ltr
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESSKEYID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region:  ${{ env.AWS_REGION }}
            
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Configure kube config to run kubectl commands
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.AWS_CLUSTER }}

      - name: Update namespace file and create namespace
        run: |
            cd deployment/helloworld/deployments
            sed -i s/'{{namespace}}'/${{ env.NAMESPACE }}/g ./namespace.yaml
            kubectl apply -f ./namespace.yaml
      
      - name: Update the deployment file and create deployment
        run: |
          cd deployment/helloworld/deployments
          sed -i s/'{{namespace}}'/${{ env.NAMESPACE }}/g ./deployment.yaml
          sed -i s/'{{app_name}}'/${{ env.APP_NAME }}/g ./deployment.yaml
          sed -i 's|'{{image_name}}'|${{ steps.login-ecr.outputs.registry }}/\${{ secrets.AWS_REPO }}:${{ github.sha }}|g' ./deployment.yaml
          sed -i s/'{{deployment_name}}'/${{ env.APP_NAME }}-deployment/g ./deployment.yaml
          kubectl apply -f ./deployment.yaml

      - name: Update the service file and create service for the app
        run: |
          cd deployment/helloworld/deployments
          sed -i s/'{{namespace}}'/${{ env.NAMESPACE }}/g ./service.yaml
          sed -i s/'{{app_name}}'/${{ env.APP_NAME }}/g ./service.yaml
          sed -i s/'{{service_name}}'/${{ env.APP_NAME }}-service/g ./service.yaml
          kubectl apply -f ./service.yaml

      # Ingress file can be kept outside of this app and can be in comman deployment file
      - name: Update the ingress file and create ingress for the app
        run: |
          cd deployment/helloworld/deployments
          sed -i s/'{{namespace}}'/${{ env.NAMESPACE }}/g ./ingress.yaml
          sed -i s/'{{ingress_name}}'/${{ env.NAMESPACE }}-ingress/g ./ingress.yaml
          sed -i s/'{{service_name}}'/${{ env.APP_NAME }}-service/g ./ingress.yaml
          kubectl apply -f ./ingress.yaml
          
  setalaram:
        name: üì¶ Set alaram to the pod
        needs: [build,deploy]
        runs-on: ubuntu-latest
        
        steps:
          - name: Checkout Master Repo
            uses: actions/checkout@v2
            with:
              ref: feature/kubedeployment
              path: cloudwatch

          - name: Change directory to deployment
            run: |
                cd deployment/cloudwatch/terraform
                ls -ltr
      
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESSKEYID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region:  ${{ env.AWS_REGION }}

          - name: Configure kube config to run kubectl commands
            run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.AWS_CLUSTER }}

          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v1
            with:
                terraform_version: 1.2.7
                cli_config_credentials_token: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          - name: Terraform Init
            id: init
            run: |
                cd deployment/cloudwatch/terraform
                terraform init
            working-directory: ${{ github.workspace }}
      
          - name: Terraform Validate
            id: validate
            run: |
                cd deployment/cloudwatch/terraform
                terraform validate -no-color
          
          - name: Terraform Plan
            id: plan
            run: |
                cd deployment/cloudwatch/terraform
                terraform plan -no-color
            working-directory: ${{ github.workspace }} 
          
          
          - name: Terraform Apply
            run: |
                cd deployment/cloudwatch/terraform
                terraform apply -auto-approve -var='pod_name=${{ env.app_name }}-deployment,aws_access_key=${{ secrets.AWS_ACCESSKEYID }},aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            working-directory: '${{ github.workspace }}'

          - name: List kubernetes resources
            run: |
               kubectl get deployment -n ${{ env.NAMESPACE }}
               kubectl get ingress/${{ env.NAMESPACE }}-ingress -n game-2048
